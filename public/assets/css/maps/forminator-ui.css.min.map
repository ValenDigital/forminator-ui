{"version":3,"sources":["forminator-ui/mixins/_body-class.scss","forminator-ui/_grid.scss","forminator-ui/_variables.scss","forminator-ui/mixins/_breakpoints.scss","forminator-ui/_input.scss","forminator-ui/mixins/_opacity.scss"],"names":[],"mappings":"AAgBE,2GCPE,kBCee,CFRjB,2GCCE,kBCOe,CFRjB,6ECaE,iBCHoB,CFVtB,6ECqBE,iBCXoB,CCRtB,0BHFA,qECgCE,oBAAA,AAAa,oBAAb,AAAa,YAAA,CAEd,CEhCD,0BHFA,sFC0CG,eAAgB,CAEjB,CE1CF,0BHFA,qEC+CE,mBAAA,AAAO,WAAP,AAAO,MAAA,CAER,CE/CD,0BHFA,uHC0DG,mBACA,iBAA6B,CAE9B,CE3DF,0BHFA,wICqEI,eAAgB,CAEjB,CErEH,0BHFA,uHC0EG,cAAyB,CAE1B,CE1EF,0BHFA,yFCsFG,kBACA,gBAAsC,CAEvC,CEvFF,0BHFA,yFC+FG,aAAkC,CAEnC,CDjGF,0CIbA,WACA,YACA,cACA,SACA,UACA,uBACA,gBFoBuB,CFbvB,8OIAC,aACA,wBAAA,AAAgB,eAAA,CJDjB,mDIKC,oBACA,mBAAoB,CJNrB,oEKFA,yBACA,2DACA,WACA,iBDQsB,CJTtB,qEKFA,yBACA,2DACA,WACA,iBDYsB,CJbtB,yEKFA,yBACA,2DACA,WACA,iBDgBsB,CJjBtB,8EKFA,yBACA,2DACA,WACA,iBDoBsB,CJhBtB,qEI2BA,YACA,iBACA,mBACA,iBFf0B,CFf1B,kEIuCA,YACA,iBACA,kBACA,eAAgB,CJ1ChB,kEImDA,iBACA,mBACA,eAAgB,CJrDhB,sEI8DA,eACA,QAAS,CACT","file":"../forminator-ui.css","sourcesContent":["// =============================================\n// There are two way for using this mixin. You\n// can display module class only or module class\n// with module theme. For both cases follow this:\n//\n// A) To get quiz module class only:\n//    @include body-class(quiz, '') { ... }\n//\n// B) To get quiz module + flat theme class:\n//    @include body-class(quiz, flat) { ... }\n// =============================================\n\n@mixin body-class($module-type, $module-theme: null) {\n\n\t@if ($module-theme == null) {\n\n\t\t.forminator-#{$module-type} {\n\t\t\t@content;\n\t\t}\n\t} @else {\n\n\t\t.forminator-#{$module-type}.forminator-design--#{$module-theme} {\n\t\t\t@content;\n\t\t}\n\t}\n}","@include body-class(custom-form) {\n\n\t// SPACING: Default\n\t&:not(.forminator-enclosed):not(.forminator-custom) {\n\n\t\t// ELEMENT: Row\n\t\t.forminator-row {\n\n\t\t\t&:not(:last-child) {\n\t\t\t\tmargin-bottom: $gutter-sm;\n\t\t\t}\n\t\t}\n\n\t\t// ELEMENT: Column\n\t\t.forminator-col {\n\n\t\t\t&:not(:last-child) {\n\t\t\t\tmargin-bottom: $gutter-sm;\n\t\t\t}\n\t\t}\n\t}\n\n\t// SPACING: Enclosed\n\t&.forminator-enclosed {\n\n\t\t// ELEMENT: Row\n\t\t.forminator-row {\n\n\t\t\t&:not(:last-child) {\n\t\t\t\tmargin-bottom: $gutter-enclosed-sm;\n\t\t\t}\n\t\t}\n\n\t\t// ELEMENT: Column\n\t\t.forminator-col {\n\n\t\t\t&:not(:last-child) {\n\t\t\t\tmargin-bottom: $gutter-enclosed-sm;\n\t\t\t}\n\t\t}\n\t}\n\n\t&:not(.forminator-size--small) {\n\n\t\t// ELEMENT: Row\n\t\t.forminator-row {\n\n\t\t\t@include media(min-width, md) {\n\t\t\t\tdisplay: flex;\n\t\t\t}\n\t\t}\n\n\t\t// ELEMENT: Column\n\t\t.forminator-col {\n\n\t\t\t&:not(:last-child) {\n\n\t\t\t\t@include media(min-width, md) {\n\t\t\t\t\tmargin-bottom: 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@include media(min-width, md) {\n\t\t\t\tflex: 1;\n\t\t\t}\n\t\t}\n\n\t\t// SPACING: Default\n\t\t&:not(.forminator-enclosed):not(.forminator-custom) {\n\n\t\t\t// ELEMENT: Row\n\t\t\t.forminator-row {\n\n\t\t\t\t@include media(min-width, md) {\n\t\t\t\t\tmargin-right: -#{$gutter / 2};\n\t\t\t\t\tmargin-left: -#{$gutter / 2};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// ELEMENT: Column\n\t\t\t.forminator-col {\n\n\t\t\t\t&:not(:last-child) {\n\n\t\t\t\t\t@include media(min-width, md) {\n\t\t\t\t\t\tmargin-bottom: 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@include media(min-width, md) {\n\t\t\t\t\tpadding: 0 #{$gutter / 2};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// SPACING: Enclosed\n\t\t&.forminator-enclosed {\n\n\t\t\t// ELEMENT: Row\n\t\t\t.forminator-row {\n\n\t\t\t\t@include media(min-width, md) {\n\t\t\t\t\tmargin-right: -#{$gutter-enclosed / 2};\n\t\t\t\t\tmargin-left: -#{$gutter-enclosed / 2};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// ELEMENT: Column\n\t\t\t.forminator-col {\n\n\t\t\t\t@include media(min-width, md) {\n\t\t\t\t\tpadding: 0 #{$gutter-enclosed / 2};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}","// =============================================\n// VARIABLES MENU\n//\n// 1. BREAKPOINTS\n// 2. BASIC VARIABLES\n// 3. DESIGN: DEFAULT\n// 4. DESIGN: FLAT\n// 5. DESIGN: BOLD\n// 6. DESIGN: MATERIAL\n// =============================================\n\n// =============================================\n// 1. BREAKPOINTS\n\n$fui-breakpoints: (\n\tsm: 783px,\n\tmd: 961px,\n\tlg: 1201px\n) !default;\n\n// =============================================\n// 2. BASIC VARIABLES\n\n$gutter:\t\t\t\t30px !default;\n$gutter-sm:\t\t\t\t20px !default;\n$gutter-enclosed:\t\t14px !default;\n$gutter-enclosed-sm:\t8px  !default;\n\n$input--height:      40px !default;\n$input--line-height: 20px !default;\n\n// =============================================\n// 3. DESIGN: DEFAULT\n\n$default--border-width:  1px   !default;\n$default--border-style:  solid !default;\n$default--border-radius: 2px   !default;\n\n// =============================================\n// 4. DESIGN: FLAT\n\n$flat--input-border-width:       1px   !default;\n$flat--input-border-style:       none  !default;\n\n$flat--input-error-border-style: solid !default;\n\n// =============================================\n// 5. DESIGN: BOLD\n$bold--input-border-width: 3px   !default;\n$bold--input-border-style: solid !default;\n\n// =============================================\n// 6. DESIGN: MATERIAL\n$material--input-padding: 10px !default;","// =============================================\n// You can get breakpoints based on minimum width\n// or based on maximium width. For both cases, do\n// the following:\n//\n// A) Display styles based on min-width:\n//    @include media(min-width, small);\n//\n// B) Display styles based on max-width:\n//    @include media(max-width, small);\n// =============================================\n\n@mixin media($bp-type, $bp-name-1, $bp-name-2: null) {\n\n\t@if ($bp-type == min-width) {\n\n\t\t$min-breakpoint-width: map-get($fui-breakpoints, $bp-name-1);\n\n\t\t@media (min-width: $min-breakpoint-width) {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@else if ($bp-type == max-width) {\n\n\t\t$max-breakpoint-width: #{map-get($fui-breakpoints, $bp-name-1) - 1px};\n\n\t\t@media (max-width: $max-breakpoint-width) {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@else if ($bp-type == between) {\n\t\t\n\t\t$min-breakpoint-width: map-get($fui-breakpoints, $bp-name-1);\n\t\t$max-breakpoint-width: #{map-get($fui-breakpoints, $bp-name-1) - 1px};\n\n\t\t@media (min-width: $min-breakpoint-width) and (max-width: $max-breakpoint-width) {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@else {\n\n\t\t@warn \"Unfortunately, no type could be retrieved from `#{$bp-type}`. \"\n\t\t+ \"Use either `min-width`, `max-width`, or `between`.\";\n\t}\n}","@include body-class(custom-form) {\n\n\t.forminator-input {\n\t\twidth: 100%;\n\t\theight: $input--height;\n\t\tdisplay: block;\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tbackground-image: unset;\n\t\tline-height: $input--line-height;\n\t\n\t\t&,\n\t\t&:hover,\n\t\t&:focus,\n\t\t&:active,\n\t\t&:disabled {\n\t\t\toutline: none;\n\t\t\tbox-shadow: none;\n\t\t}\n\t\n\t\t&:disabled {\n\t\t\tpointer-events: none;\n\t\t\tborder-style: dotted;\n\t\n\t\t\t&:-moz-placeholder {\n\t\t\t\t@include opacity(0.4);\n\t\t\t}\n\t\t\n\t\t\t&::-moz-placeholder {\n\t\t\t\t@include opacity(0.4);\n\t\t\t}\n\t\n\t\t\t&:-ms-input-placeholder {\n\t\t\t\t@include opacity(0.4);\n\t\t\t}\n\t\n\t\t\t&::-webkit-input-placeholder {\n\t\t\t\t@include opacity(0.4);\n\t\t\t}\n\t\t}\n\t}\n}\n\n// =============================================\n// DESIGN: Default\n@include body-class(custom-form, default) {\n\n\t.forminator-input {\n\t\tpadding: #{($input--height - ($default--border-width * 2) - $input--line-height) / 2};\n\t\tborder-width: $default--border-width;\n\t\tborder-style: $default--border-style;\n\t\tborder-radius: $default--border-radius;\n\t}\n}\n\n// =============================================\n// DESIGN: Flat\n@include body-class(custom-form, flat) {\n\n\t.forminator-input {\n\t\tpadding: #{($input--height - ($flat--input-border-width * 2) - $input--line-height) / 2};\n\t\tborder-width: $flat--input-border-width;\n\t\tborder-style: $flat--input-border-style;\n\t\tborder-radius: 0;\n\t}\n}\n\n// =============================================\n// DESIGN: Bold\n@include body-class(custom-form, bold) {\n\n\t.forminator-input {\n\t\tborder-width: $bold--input-border-width;\n\t\tborder-style: $bold--input-border-style;\n\t\tborder-radius: 0;\n\t}\n}\n\n// =============================================\n// DESIGN: Material\n@include body-class(custom-form, material) {\n\n\t.forminator-input {\n\t\tpadding: $material--input-padding 0;\n\t\tborder: 0;\n\t}\n}","// =============================================\n// For example, to get 65% opacity, do the this:\n// @include opacity(0.65);\n// =============================================\n\n@mixin opacity($alpha) {\n\n\t@if ($alpha > 1) {\n\n\t\t@warn \"Unfortunately, nothing could be retrieved from `#{$alpha}`. \"\n\t\t+ \"You need to insert values from `0` to `1`, you can also make use of decimals like `0.20` to represent 20% opacity.\";\n\t}\n\n\t@else {\n\t\tfilter: alpha(opacity=$alpha*100);\n\t\tfilter: progid:DXImageTransform.Microsoft.Alpha(opacity=#{$alpha*100});\n\t\topacity: $alpha;\n\t\t-khtml-opacity: $alpha;\n\t}\n}"]}